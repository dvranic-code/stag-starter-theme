(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

var _utils = require("../utils");
function fetch_posts() {
  const loadMoreBtn = document.querySelector(".load--more");
  if (loadMoreBtn === null) {
    return;
  }
  let postsGrid = document.querySelector(".posts-grid");
  if (postsGrid) {
    if (document.querySelector(".posts-grid").dataset.page == document.querySelector(".posts-grid").dataset.max) {
      loadMoreBtn.style.display = "none";
    }
  } else {
    if (document.querySelector(".site-main").dataset.page == document.querySelector(".site-main").dataset.max) {
      loadMoreBtn.style.display = "none";
    }
  }
  loadMoreBtn.addEventListener("click", async e => {
    e.preventDefault();
    let currentPage = '';
    let postsGrid = document.querySelector(".posts-grid");
    if (postsGrid) {
      currentPage = document.querySelector(".posts-grid").dataset.page;
    } else {
      currentPage = document.querySelector(".site-main").dataset.page;
    }
    let postType = '';
    let numberOfPosts = '';
    if (postsGrid) {
      postType = document.querySelector(".posts-grid").dataset.post;
      numberOfPosts = document.querySelector(".posts-grid").dataset.number;
    }
    let maxPages = document.querySelector(".site-main").dataset.max;
    let isSearch = document.querySelector(".site-main").dataset.search === "is-search";
    let searchField = document.querySelector(".search-form__search-field");
    let searchQuery = '';
    if (searchField) {
      searchQuery = searchField.value;
    }
    let isBlock = postsGrid ? postsGrid.dataset.block === "is-block" : false;
    const postsGridWrapper = document.getElementsByClassName("posts-grid__wrapper")[0];
    const postsGridBtnWrapper = document.getElementsByClassName("posts-grid__btn-wrapper")[0];
    const moreData = new FormData();
    moreData.append("action", "load_more_posts");
    moreData.append("currentPage", currentPage);
    moreData.append("searchQuery", searchQuery);
    moreData.append("postType", postType);
    moreData.append("numberOfPosts", numberOfPosts);
    moreData.append('_nonce', WP_vars.nonce); // eslint-disable-line

    const dataCall = await fetch(WP_vars.ajaxURL, {
      // eslint-disable-line
      method: "POST",
      body: moreData
    }).then(res => {
      if (res.ok) {
        return res.json(); // Parse the JSON response
      } else {
        throw new Error(`Request failed with status: ${res.status}`);
      }
    }).then(data => {
      if (data && data.data) {
        const htmlString = data.data[0]; // Extract the HTML content from the response

        // const maxPages = data.data[1]; // Extract the max pages from the response for search

        postsGridBtnWrapper.insertAdjacentHTML("beforebegin", htmlString);
        if (!isSearch && !isBlock) {
          let getUrl = window.location;
          let baseUrl = getUrl.protocol + "//" + getUrl.host + "/" + getUrl.pathname.split('/')[1];
          window.history.pushState('', '', baseUrl + '/page/' + (parseInt(document.querySelector(".site-main").dataset.page) + 1));
        }
        document.querySelector(".site-main").dataset.page++;
        if (document.querySelector(".site-main").dataset.page == document.querySelector(".site-main").dataset.max) {
          loadMoreBtn.style.display = "none";
        }
        if (isBlock) {
          document.querySelector(".posts-grid").dataset.page++;
          if (document.querySelector(".posts-grid").dataset.page == document.querySelector(".posts-grid").dataset.max) {
            loadMoreBtn.style.display = "none";
          }
        }

        // if ( isSearch ) {
        //   if ( document.querySelector(".site-main").dataset.page == maxPages ) {
        //     loadMoreBtn.style.display = "none";
        //   }
        // }
      } else {
        console.warn('Invalid data received from the server');
      }
    }).catch(err => console.warn(err));
  });
}
(0, _utils.onReady)(() => {
  fetch_posts();
});

},{"../utils":5}],2:[function(require,module,exports){
"use strict";

var _utils = require("../utils");
function showMenu() {
  const navigation = document.getElementById("main-navigation");
  const menuItems = document.querySelectorAll("#main-navigation li.children-zero-level.menu-item-has-children");
  const menuOverlay = document.getElementsByClassName("site-header__nav-overlay")[0];
  if (navigation === null || menuItems.length === 0) {
    return;
  }
  menuItems.forEach(menuItem => {
    menuItem.addEventListener("mouseenter", function () {
      navigation.classList.add("menu-active");
      menuOverlay.classList.add("overlay-active");
      this.classList.add("active");
    });
    menuItem.addEventListener("mouseleave", function () {
      navigation.classList.remove("menu-active");
      menuOverlay.classList.remove("overlay-active");
      this.classList.remove("active");
    });
  });
  const subMenu = document.querySelectorAll('.sub-menu li.menu-item-has-children');
  subMenu.forEach(menuItem => {
    menuItem.addEventListener("mouseenter", function () {
      this.classList.add("active");
    });
    menuItem.addEventListener("mouseleave", function () {
      this.classList.remove("active");
    });
  });
}
function getMainNavWidth() {
  const mainNavWidth = document.getElementById("mainNavWidth");
  const getWidth = mainNavWidth.offsetWidth;
  if (getWidth === null) {
    return;
  }
  document.documentElement.style.setProperty("--mainNavWidth", getWidth + "px");
}
function toggleLanguageSwitcher(id, menuClass) {
  const body = document.getElementsByTagName('body')[0];
  const languageIcon = document.getElementById(id);
  const langSubMenu = document.getElementsByClassName(menuClass)[0];
  if (!languageIcon) return;
  languageIcon.addEventListener('click', e => {
    e.preventDefault();
    e.stopPropagation();
    langSubMenu.classList.toggle('active');
  });
  body.addEventListener('click', e => {
    if (!e.target.classList.contains(menuClass)) langSubMenu.classList.remove('active');
  });
}
function languageSwitcher() {
  toggleLanguageSwitcher("languageIcon", "lang-sub-menu");
  toggleLanguageSwitcher("languageIconMobile", "lang-sub-menu-mobile");
}
function triggerSearchBox() {
  const body = document.getElementsByTagName('body')[0];
  const triggerSearchBox = document.getElementById("triggerSearchBox");
  const triggerSearchBoxMobile = document.getElementById("triggerSearchBoxMobile");
  const searchPopup = document.getElementsByClassName("site-header__search-popup")[0];
  if (triggerSearchBox === null || searchPopup === null) {
    return;
  }
  function handleSearchBoxClick(e) {
    e.preventDefault();
    searchPopup.classList.toggle("active");
    body.classList.toggle("disable-scroll-search");
  }
  if (triggerSearchBox) {
    triggerSearchBox.addEventListener("click", handleSearchBoxClick);
  }
  if (triggerSearchBoxMobile) {
    triggerSearchBoxMobile.addEventListener("click", handleSearchBoxClick);
  }
}
function triggerMobileMenu() {
  const body = document.getElementsByTagName('body')[0];
  const hamburger = document.getElementsByClassName("site-header__mobile-wrap--hamburger")[0];
  const mobileMobileMenu = document.getElementsByClassName("mobile-menu")[0];
  if (hamburger === null) {
    return;
  }
  const childrenZeroLevel = document.querySelectorAll('#mobile-menu-navigation li.children-zero-level.menu-item-has-children');
  const childrenFirstLevel = document.querySelectorAll('#mobile-menu-navigation li.children-first-level.menu-item-has-children');
  childrenZeroLevel.forEach(zeroItem => {
    const subMenuToggle = document.createElement('span');
    subMenuToggle.classList.add('sub-menu-toggle');
    subMenuToggle.addEventListener('click', function () {
      this.classList.toggle('active');
      this.parentElement.classList.toggle('active');
    });
    zeroItem.appendChild(subMenuToggle);
  });
  childrenFirstLevel.forEach(firstLevelItem => {
    const subMenuToggleFirstLevel = document.createElement('span');
    subMenuToggleFirstLevel.classList.add('sub-menu-level-two-toggle');
    subMenuToggleFirstLevel.addEventListener('click', function () {
      this.classList.toggle('menu-active');
      this.parentElement.classList.toggle('menu-active');
    });
    firstLevelItem.appendChild(subMenuToggleFirstLevel);
  });
  hamburger.addEventListener("click", function () {
    this.classList.toggle("hamburger--active");
    mobileMobileMenu.classList.toggle("active");
    body.classList.toggle("disable-scroll-search");
  });
}
(0, _utils.onReady)(() => {
  showMenu();
  languageSwitcher();
  triggerSearchBox();
  triggerMobileMenu();
  setTimeout(() => {
    getMainNavWidth();
  }, 2000);
});

},{"../utils":5}],3:[function(require,module,exports){
"use strict";

var _utils = require("../utils");
function initContentSwiper() {
  if (!document.querySelectorAll(".content-slider__swiper").length) return;
  const content_swiper = new Swiper(".content-slider__swiper", {
    // eslint-disable-line
    slidesPerView: 1,
    spaceBetween: 13.9,
    loop: false,
    breakpoints: {
      0: {
        slidesPerView: 1,
        spaceBetween: 20
      },
      520: {
        slidesPerView: 2,
        spaceBetween: 20
      },
      1024: {
        slidesPerView: 3,
        spaceBetween: 24
      }
    },
    pagination: {
      el: ".swiper-pagination",
      type: "progressbar"
    },
    navigation: {
      prevEl: ".swiper-pagination__swiper-button-prev",
      nextEl: ".swiper-pagination__swiper-button-next"
    }
  });
}
function initTimelineSwiper() {
  if (!document.querySelectorAll(".timeline-slider__swiper").length) return;
  const timline_swiper = new Swiper(".timeline-slider__swiper", {
    // eslint-disable-line
    slidesPerView: 5,
    loop: false,
    breakpoints: {
      0: {
        slidesPerView: 1
      },
      501: {
        slidesPerView: 2
      },
      992: {
        slidesPerView: 3
      },
      1100: {
        slidesPerView: 4
      }
    },
    navigation: {
      prevEl: ".swiper-pagination__swiper-button-prev",
      nextEl: ".swiper-pagination__swiper-button-next"
    }
  });
}
function calcTimelineSwiperHeight() {
  const slides = document.querySelectorAll('.timeline-slider__slide');
  if (!slides.length) return;
  let maxHeight = 0;
  slides.forEach(function (slide) {
    const timestamp = slide.querySelector('.timeline-slider__timestamp');
    const content = slide.querySelector('.timeline-slider__content');
    if (!timestamp || !content) return;
    let timestampHeight = timestamp.offsetHeight;
    let contentHeight = content.offsetHeight;
    maxHeight = Math.max(maxHeight, timestampHeight, contentHeight);
  });
  slides.forEach(function (slide) {
    const timestamp = slide.querySelector('.timeline-slider__timestamp');
    const content = slide.querySelector('.timeline-slider__content');
    if (!timestamp || !content) return;
    timestamp.style.height = maxHeight + 'px';
    content.style.height = maxHeight + 'px';
  });
}
function timlineSwiperMobile() {
  let slides = document.querySelectorAll('.timeline-slider__slide');
  if (!slides.length) return;
  if (window.matchMedia("(max-width: 501px)").matches) {
    slides.forEach(function (slide) {
      if (!slide.classList.contains('swiper-slide__initial')) {
        slide.classList.add('swiper-slide__initial');
        slide.classList.add('swiper-slide__initial--mobile');
      }
    });
  } else {
    slides.forEach(function (slide) {
      if (slide.classList.contains('swiper-slide__initial--mobile')) {
        slide.classList.remove('swiper-slide__initial');
        slide.classList.remove('swiper-slide__initial--mobile');
      }
    });
  }
}
let profiles_swiper; // Declare the variable outside the functions so we can access it inside all functions

function initMobileProfiles() {
  if (!document.querySelectorAll(".block-profiles__swiper").length) return;
  profiles_swiper = new Swiper(".block-profiles__swiper", {
    // eslint-disable-line
    slidesPerView: 1,
    loop: false,
    breakpoints: {
      0: {
        slidesPerView: 1
      },
      768: {
        slidesPerView: 2,
        spaceBetween: 30
      },
      992: {
        slidesPerView: 2,
        spaceBetween: 30
      }
    },
    navigation: {
      prevEl: ".swiper-pagination__swiper-button-prev",
      nextEl: ".swiper-pagination__swiper-button-next"
    }
  });
}
function destroyMobileProfiles() {
  if (profiles_swiper !== undefined && profiles_swiper !== null) {
    profiles_swiper.destroy(true, true);
    profiles_swiper = null; // Reset the variable
  }
}

function calcOffsetElementHeight() {
  const offsetElements = document.querySelectorAll('.offset-element');
  const offsetElementContents = document.querySelectorAll('.block-profiles__swiper--wrapper--content');
  if (!offsetElements.length || !offsetElementContents.length) return;
  offsetElements.forEach(function (offsetElement, index) {
    const offsetElementHeight = offsetElement.offsetHeight;

    // Use the index of the current offsetElement to access the corresponding offsetElementContent
    const offsetElementContent = offsetElementContents[index];
    if (!offsetElementContent) return;
    offsetElementContent.style.bottom = -offsetElementHeight + 'px';
  });
}
(0, _utils.onReady)(() => {
  initContentSwiper();
  initTimelineSwiper();
  if (window.innerWidth > 501) {
    calcTimelineSwiperHeight();
  }
  timlineSwiperMobile();
  window.addEventListener('resize', (0, _utils.debounce)(timlineSwiperMobile, 200));
  window.addEventListener('resize', (0, _utils.debounce)(function () {
    if (window.matchMedia("(min-width: 768px) and (max-width: 992px)").matches || window.matchMedia("(min-width: 992px) and (max-width: 1366px)").matches || window.matchMedia("(min-width: 1366px)").matches) {
      calcTimelineSwiperHeight();
    }
  }, 200));
  window.addEventListener('resize', (0, _utils.debounce)(function () {
    if (window.innerWidth < 1024) {
      initMobileProfiles();
    } else {
      destroyMobileProfiles();
    }
  }, 200));
  if (window.innerWidth < 1024) {
    initMobileProfiles();
  } else {
    destroyMobileProfiles();
  }
  calcOffsetElementHeight();

  // Sorry for this, but I needed to use external libraries to make this work
  const marqueeSlider = document.getElementById('marqueeSlider');
  if (!marqueeSlider) return;
  jQuery('#marqueeSlider').grouploop({
    velocity: 1,
    forward: false,
    pauseOnHover: true,
    childNode: ".item",
    childWrapper: ".item-wrap",
    complete: function () {
      console.log("Initialized a grouploop with id: " + jQuery(this).attr('id'));
    },
    stickFirstItem: false
  });
});

},{"../utils":5}],4:[function(require,module,exports){
"use strict";

(() => {
  require("./components/header.js");
  require("./components/swiper.js");
  require("./components/fetch-posts.js");
})();

},{"./components/fetch-posts.js":1,"./components/header.js":2,"./components/swiper.js":3}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.onReady = exports.debounce = void 0;
/**
 *
 * @param {Function} fn The user defined function to execute only upon successful DOM load
 */
const onReady = fn => {
  if (document.readyState !== "loading") {
    fn();
  } else {
    document.addEventListener("DOMContentLoaded", fn);
  }
};

/**
 * Execute a given function after a giving timeout period
 * @param {Function} fn The function to call
 * @param {number} timeout In miliseconds the amount of time to wait
 * @returns {Function}
 */
exports.onReady = onReady;
const debounce = (fn, timeout) => {
  let timeoutId;
  return function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    clearTimeout(timeoutId);
    timeoutId = setTimeout(() => fn.apply(this, args), timeout);
  };
};
exports.debounce = debounce;

},{}]},{},[1,2,3,4,5])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
