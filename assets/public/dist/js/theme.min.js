(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

var _utils = require("../utils");
function fetch_posts() {
  const loadMoreBtn = document.querySelector(".load--more");
  if (loadMoreBtn === null) {
    return;
  }
  loadMoreBtn.addEventListener("click", function (e) {
    e.preventDefault();
    let currentPage = document.querySelector('.site-main').dataset.page;
    let maxPages = document.querySelector('.site-main').dataset.max;
  });
}
(0, _utils.onReady)(() => {
  fetch_posts();
});

},{"../utils":5}],2:[function(require,module,exports){
"use strict";

var _utils = require("../utils");
function showMenu() {
  const navigation = document.getElementById("main-navigation");
  const menuItems = document.querySelectorAll("#main-navigation li.children-zero-level.menu-item-has-children");
  const menuOverlay = document.getElementsByClassName("site-header__nav-overlay")[0];
  if (navigation === null || menuItems.length === 0) {
    return;
  }
  menuItems.forEach(menuItem => {
    menuItem.addEventListener("mouseenter", function () {
      navigation.classList.add("menu-active");
      menuOverlay.classList.add("overlay-active");
      this.classList.add("active");
    });
    menuItem.addEventListener("mouseleave", function () {
      navigation.classList.remove("menu-active");
      menuOverlay.classList.remove("overlay-active");
      this.classList.remove("active");
    });
  });
  const subMenu = document.querySelectorAll('.sub-menu li.menu-item-has-children');
  subMenu.forEach(menuItem => {
    menuItem.addEventListener("mouseenter", function () {
      this.classList.add("active");
    });
    menuItem.addEventListener("mouseleave", function () {
      this.classList.remove("active");
    });
  });
}
function getMainNavWidth() {
  const mainNavWidth = document.getElementById("mainNavWidth");
  const getWidth = mainNavWidth.offsetWidth;
  if (getWidth === null) {
    return;
  }
  document.documentElement.style.setProperty("--mainNavWidth", getWidth + "px");
}
function toggleLanguageSwitcher(id, menuClass) {
  const body = document.getElementsByTagName('body')[0];
  const languageIcon = document.getElementById(id);
  const langSubMenu = document.getElementsByClassName(menuClass)[0];
  if (!languageIcon) return;
  languageIcon.addEventListener('click', e => {
    e.stopPropagation();
    langSubMenu.classList.toggle('active');
  });
  body.addEventListener('click', e => {
    if (!e.target.classList.contains(menuClass)) langSubMenu.classList.remove('active');
  });
}
function languageSwitcher() {
  toggleLanguageSwitcher("languageIcon", "lang-sub-menu");
  toggleLanguageSwitcher("languageIconMobile", "lang-sub-menu-mobile");
}
function triggerSearchBox() {
  const body = document.getElementsByTagName('body')[0];
  const triggerSearchBox = document.getElementById("triggerSearchBox");
  const triggerSearchBoxMobile = document.getElementById("triggerSearchBoxMobile");
  const searchPopup = document.getElementsByClassName("site-header__search-popup")[0];
  if (triggerSearchBox === null || searchPopup === null) {
    return;
  }
  function handleSearchBoxClick() {
    searchPopup.classList.toggle("active");
    body.classList.toggle("disable-scroll-search");
  }
  if (triggerSearchBox) {
    triggerSearchBox.addEventListener("click", handleSearchBoxClick);
  }
  if (triggerSearchBoxMobile) {
    triggerSearchBoxMobile.addEventListener("click", handleSearchBoxClick);
  }
}
function triggerMobileMenu() {
  const body = document.getElementsByTagName('body')[0];
  const hamburger = document.getElementsByClassName("site-header__mobile-wrap--hamburger")[0];
  const mobileMobileMenu = document.getElementsByClassName("mobile-menu")[0];
  if (hamburger === null) {
    return;
  }
  const childrenZeroLevel = document.querySelectorAll('#mobile-menu-navigation li.children-zero-level.menu-item-has-children');
  const childrenFirstLevel = document.querySelectorAll('#mobile-menu-navigation li.children-first-level.menu-item-has-children');
  childrenZeroLevel.forEach(zeroItem => {
    const subMenuToggle = document.createElement('span');
    subMenuToggle.classList.add('sub-menu-toggle');
    subMenuToggle.addEventListener('click', function () {
      this.classList.toggle('active');
      this.parentElement.classList.toggle('active');
    });
    zeroItem.appendChild(subMenuToggle);
  });
  childrenFirstLevel.forEach(firstLevelItem => {
    const subMenuToggleFirstLevel = document.createElement('span');
    subMenuToggleFirstLevel.classList.add('sub-menu-level-two-toggle');
    subMenuToggleFirstLevel.addEventListener('click', function () {
      this.classList.toggle('menu-active');
      this.parentElement.classList.toggle('menu-active');
    });
    firstLevelItem.appendChild(subMenuToggleFirstLevel);
  });
  hamburger.addEventListener("click", function () {
    this.classList.toggle("hamburger--active");
    mobileMobileMenu.classList.toggle("active");
    body.classList.toggle("disable-scroll-search");
  });
}
(0, _utils.onReady)(() => {
  showMenu();
  languageSwitcher();
  triggerSearchBox();
  triggerMobileMenu();

  // TODO: Remove this after fixing the font loading issue.
  setTimeout(() => {
    getMainNavWidth();
  }, 2000);
});

},{"../utils":5}],3:[function(require,module,exports){
"use strict";

var _utils = require("../utils");
function initSwiper() {
  if (!document.querySelectorAll(".content-slider__swiper").length) return;
  const swiper = new Swiper(".content-slider__swiper", {
    // eslint-disable-line
    slidesPerView: 1,
    spaceBetween: 13.9,
    loop: true,
    breakpoints: {
      0: {
        slidesPerView: 1,
        spaceBetween: 20
      },
      768: {
        slidesPerView: 2,
        spaceBetween: 20
      },
      1366: {
        slidesPerView: 3,
        spaceBetween: 24
      }
    },
    pagination: {
      el: ".swiper-pagination",
      type: "progressbar"
    },
    navigation: {
      prevEl: ".swiper-pagination__swiper-button-prev",
      nextEl: ".swiper-pagination__swiper-button-next"
    }
  });
}
(0, _utils.onReady)(() => {
  initSwiper();
});

},{"../utils":5}],4:[function(require,module,exports){
"use strict";

(() => {
  require("./components/header.js");
  require("./components/swiper.js");
  require("./components/fetch-posts.js");
})();

},{"./components/fetch-posts.js":1,"./components/header.js":2,"./components/swiper.js":3}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.onReady = exports.debounce = void 0;
/**
 *
 * @param {Function} fn The user defined function to execute only upon successful DOM load
 */
const onReady = fn => {
  if (document.readyState !== "loading") {
    fn();
  } else {
    document.addEventListener("DOMContentLoaded", fn);
  }
};

/**
 * Execute a given function after a giving timeout period
 * @param {Function} fn The function to call
 * @param {number} timeout In miliseconds the amount of time to wait
 * @returns {Function}
 */
exports.onReady = onReady;
const debounce = (fn, timeout) => {
  let timeoutId;
  return function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    clearTimeout(timeoutId);
    timeoutId = setTimeout(() => fn.apply(this, args), timeout);
  };
};
exports.debounce = debounce;

},{}]},{},[1,2,3,4,5])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
